// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

public abstract class _IDataMonitorDisp extends Ice.ObjectImpl implements IDataMonitor
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::IDataMonitor"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * Description: 获得设备状态
     * Input: 
     * Output: states 返回设备状态列表
     * Return:
     * Others: 将返回全部设备的运行状态
     **/
    public final Result getDevicesState(DeviceInfoListHolder states)
    {
        return getDevicesState(states, null);
    }

    /**
     * Description: 查询设备的通信数据帧
     * Input: devName 设备名
     * inId 查询位置，第一次调用此参数使用0，再次调用使用上次调用返回的outId参数
     * limit 查询数据帧的最大数量
     * Output: msgs 返回查询的数据帧内容，字符串的数组
     * outId 返回查询的ID
     * Return:
     * Others: 
     **/
    public final Result queryDeviceDataFrames(String devName, int inId, int limit, StringListHolder msgs, Ice.IntHolder outId)
    {
        return queryDeviceDataFrames(devName, inId, limit, msgs, outId, null);
    }

    /**
     * Description: 转换点名为点ID(使用ID可提高点查询效率)
     * Input: ptNames 点名列表
     * Output: ptIds 返回点ID列表，如ID为-1表示无此点
     * Return:
     * Others: 
     **/
    public final Result queryPointIds(String[] ptNames, PointIdListHolder ptIds)
    {
        return queryPointIds(ptNames, ptIds, null);
    }

    /**
     * Description: 使用点ID查询点的实时值
     * Input: ptIds 点ID列表
     * Output: values 点实时值列表
     * Return:
     * Others: 
     **/
    public final Result queryRealDatas(int[] ptIds, RvqtListHolder values)
    {
        return queryRealDatas(ptIds, values, null);
    }

    /**
     * Description: 查询系统日志
     * Input: devName 设备名
     * inId 查询位置，第一次调用此参数使用0，再次调用使用上次调用返回的outId参数
     * limit 查询数据帧的最大数量
     * Output: msgs 返回查询的数据帧内容，字符串的数组
     * outId 返回查询的ID
     * Return:
     * Others: 
     **/
    public final Result querySystemLog(int inId, int limit, StringListHolder msgs, Ice.IntHolder outId)
    {
        return querySystemLog(inId, limit, msgs, outId, null);
    }

    public static Ice.DispatchStatus ___getDevicesState(IDataMonitor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        DeviceInfoListHolder states = new DeviceInfoListHolder();
        Result __ret = __obj.getDevicesState(states, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        DeviceInfoListHelper.write(__os, states.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryPointIds(IDataMonitor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String[] ptNames;
        ptNames = StringListHelper.read(__is);
        __inS.endReadParams();
        PointIdListHolder ptIds = new PointIdListHolder();
        Result __ret = __obj.queryPointIds(ptNames, ptIds, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        PointIdListHelper.write(__os, ptIds.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryRealDatas(IDataMonitor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int[] ptIds;
        ptIds = PointIdListHelper.read(__is);
        __inS.endReadParams();
        RvqtListHolder values = new RvqtListHolder();
        Result __ret = __obj.queryRealDatas(ptIds, values, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        RvqtListHelper.write(__os, values.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryDeviceDataFrames(IDataMonitor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String devName;
        int inId;
        int limit;
        devName = __is.readString();
        inId = __is.readInt();
        limit = __is.readInt();
        __inS.endReadParams();
        StringListHolder msgs = new StringListHolder();
        Ice.IntHolder outId = new Ice.IntHolder();
        Result __ret = __obj.queryDeviceDataFrames(devName, inId, limit, msgs, outId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StringListHelper.write(__os, msgs.value);
        __os.writeInt(outId.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___querySystemLog(IDataMonitor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int inId;
        int limit;
        inId = __is.readInt();
        limit = __is.readInt();
        __inS.endReadParams();
        StringListHolder msgs = new StringListHolder();
        Ice.IntHolder outId = new Ice.IntHolder();
        Result __ret = __obj.querySystemLog(inId, limit, msgs, outId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StringListHelper.write(__os, msgs.value);
        __os.writeInt(outId.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getDevicesState",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryDeviceDataFrames",
        "queryPointIds",
        "queryRealDatas",
        "querySystemLog"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getDevicesState(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___queryDeviceDataFrames(this, in, __current);
            }
            case 6:
            {
                return ___queryPointIds(this, in, __current);
            }
            case 7:
            {
                return ___queryRealDatas(this, in, __current);
            }
            case 8:
            {
                return ___querySystemLog(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
