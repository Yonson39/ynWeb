// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcCommon.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

public class DeviceInfo implements Cloneable, java.io.Serializable {
    @Override
    public String toString() {
        return "DeviceInfo{" +
                "devName='" + devName + '\'' +
                ", devState=" + devState +
                '}';
    }

    public String devName;

    public DeviceState devState;

    public DeviceInfo() {
        devName = "";
        devState = DeviceState.DSFAULT;
    }

    public DeviceInfo(String devName, DeviceState devState) {
        this.devName = devName;
        this.devState = devState;
    }

    public boolean
    equals(Object rhs) {
        if (this == rhs) {
            return true;
        }
        DeviceInfo _r = null;
        if (rhs instanceof DeviceInfo) {
            _r = (DeviceInfo) rhs;
        }

        if (_r != null) {
            if (devName != _r.devName) {
                if (devName == null || _r.devName == null || !devName.equals(_r.devName)) {
                    return false;
                }
            }
            if (devState != _r.devState) {
                if (devState == null || _r.devState == null || !devState.equals(_r.devState)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode() {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::YNRPC::DeviceInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, devName);
        __h = IceInternal.HashUtil.hashAdd(__h, devState);
        return __h;
    }

    public DeviceInfo
    clone() {
        DeviceInfo c = null;
        try {
            c = (DeviceInfo) super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os) {
        __os.writeString(devName);
        DeviceState.__write(__os, devState);
    }

    public void
    __read(IceInternal.BasicStream __is) {
        devName = __is.readString();
        devState = DeviceState.__read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, DeviceInfo __v) {
        if (__v == null) {
            __nullMarshalValue.__write(__os);
        } else {
            __v.__write(__os);
        }
    }

    static public DeviceInfo
    __read(IceInternal.BasicStream __is, DeviceInfo __v) {
        if (__v == null) {
            __v = new DeviceInfo();
        }
        __v.__read(__is);
        return __v;
    }

    private static final DeviceInfo __nullMarshalValue = new DeviceInfo();

    public static final long serialVersionUID = 1882838491L;
}
