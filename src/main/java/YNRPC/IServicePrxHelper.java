// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

/**
 * Provides type-specific helper functions.
 **/
public final class IServicePrxHelper extends Ice.ObjectPrxHelperBase implements IServicePrx
{
    private static final String __getDataMonitor_name = "getDataMonitor";

    public Result getDataMonitor(IDataMonitorPrxHolder dm)
    {
        return getDataMonitor(dm, null, false);
    }

    public Result getDataMonitor(IDataMonitorPrxHolder dm, java.util.Map<String, String> __ctx)
    {
        return getDataMonitor(dm, __ctx, true);
    }

    private Result getDataMonitor(IDataMonitorPrxHolder dm, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDataMonitor_name);
        return end_getDataMonitor(dm, begin_getDataMonitor(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDataMonitor()
    {
        return begin_getDataMonitor(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx)
    {
        return begin_getDataMonitor(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDataMonitor(Ice.Callback __cb)
    {
        return begin_getDataMonitor(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDataMonitor(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDataMonitor(Callback_IService_getDataMonitor __cb)
    {
        return begin_getDataMonitor(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, Callback_IService_getDataMonitor __cb)
    {
        return begin_getDataMonitor(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDataMonitor(FunctionalCallback_IService_getDataMonitor_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDataMonitor(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDataMonitor(FunctionalCallback_IService_getDataMonitor_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDataMonitor(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IService_getDataMonitor_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDataMonitor(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IService_getDataMonitor_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDataMonitor(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 FunctionalCallback_IService_getDataMonitor_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IService_getDataMonitor
        {
            public CB(FunctionalCallback_IService_getDataMonitor_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, IDataMonitorPrx dm)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, dm);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IServicePrxHelper.__getDataMonitor_completed(this, __result);
            }

            private final FunctionalCallback_IService_getDataMonitor_Response __responseCb;
        }
        return begin_getDataMonitor(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getDataMonitor(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDataMonitor_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDataMonitor_name, __cb);
        try
        {
            __result.prepare(__getDataMonitor_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_getDataMonitor(IDataMonitorPrxHolder dm, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDataMonitor_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            dm.value = IDataMonitorPrxHelper.__read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDataMonitor_completed(YNRPC._Callback_IService_getDataMonitor __cb, Ice.AsyncResult __result)
    {
        IServicePrx __proxy = (IServicePrx)__result.getProxy();
        Result __ret = null;
        IDataMonitorPrxHolder dm = new IDataMonitorPrxHolder();
        try
        {
            __ret = __proxy.end_getDataMonitor(dm, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, dm.value);
    }

    private static final String __getSystemControl_name = "getSystemControl";

    public Result getSystemControl(ISystemControlPrxHolder sc)
    {
        return getSystemControl(sc, null, false);
    }

    public Result getSystemControl(ISystemControlPrxHolder sc, java.util.Map<String, String> __ctx)
    {
        return getSystemControl(sc, __ctx, true);
    }

    private Result getSystemControl(ISystemControlPrxHolder sc, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSystemControl_name);
        return end_getSystemControl(sc, begin_getSystemControl(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSystemControl()
    {
        return begin_getSystemControl(null, false, false, null);
    }

    public Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx)
    {
        return begin_getSystemControl(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSystemControl(Ice.Callback __cb)
    {
        return begin_getSystemControl(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSystemControl(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemControl(Callback_IService_getSystemControl __cb)
    {
        return begin_getSystemControl(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, Callback_IService_getSystemControl __cb)
    {
        return begin_getSystemControl(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemControl(FunctionalCallback_IService_getSystemControl_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSystemControl(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSystemControl(FunctionalCallback_IService_getSystemControl_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSystemControl(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, 
                                                  FunctionalCallback_IService_getSystemControl_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSystemControl(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, 
                                                  FunctionalCallback_IService_getSystemControl_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSystemControl(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   FunctionalCallback_IService_getSystemControl_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IService_getSystemControl
        {
            public CB(FunctionalCallback_IService_getSystemControl_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, ISystemControlPrx sc)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, sc);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IServicePrxHelper.__getSystemControl_completed(this, __result);
            }

            private final FunctionalCallback_IService_getSystemControl_Response __responseCb;
        }
        return begin_getSystemControl(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getSystemControl(java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSystemControl_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSystemControl_name, __cb);
        try
        {
            __result.prepare(__getSystemControl_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_getSystemControl(ISystemControlPrxHolder sc, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSystemControl_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            sc.value = ISystemControlPrxHelper.__read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSystemControl_completed(YNRPC._Callback_IService_getSystemControl __cb, Ice.AsyncResult __result)
    {
        IServicePrx __proxy = (IServicePrx)__result.getProxy();
        Result __ret = null;
        ISystemControlPrxHolder sc = new ISystemControlPrxHolder();
        try
        {
            __ret = __proxy.end_getSystemControl(sc, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, sc.value);
    }

    private static final String __getSystemInformation_name = "getSystemInformation";

    public Result getSystemInformation(ISystemInformationPrxHolder si)
    {
        return getSystemInformation(si, null, false);
    }

    public Result getSystemInformation(ISystemInformationPrxHolder si, java.util.Map<String, String> __ctx)
    {
        return getSystemInformation(si, __ctx, true);
    }

    private Result getSystemInformation(ISystemInformationPrxHolder si, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSystemInformation_name);
        return end_getSystemInformation(si, begin_getSystemInformation(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSystemInformation()
    {
        return begin_getSystemInformation(null, false, false, null);
    }

    public Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx)
    {
        return begin_getSystemInformation(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSystemInformation(Ice.Callback __cb)
    {
        return begin_getSystemInformation(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSystemInformation(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemInformation(Callback_IService_getSystemInformation __cb)
    {
        return begin_getSystemInformation(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, Callback_IService_getSystemInformation __cb)
    {
        return begin_getSystemInformation(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSystemInformation(FunctionalCallback_IService_getSystemInformation_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSystemInformation(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSystemInformation(FunctionalCallback_IService_getSystemInformation_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSystemInformation(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_IService_getSystemInformation_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSystemInformation(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_IService_getSystemInformation_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSystemInformation(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       FunctionalCallback_IService_getSystemInformation_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IService_getSystemInformation
        {
            public CB(FunctionalCallback_IService_getSystemInformation_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, ISystemInformationPrx si)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, si);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IServicePrxHelper.__getSystemInformation_completed(this, __result);
            }

            private final FunctionalCallback_IService_getSystemInformation_Response __responseCb;
        }
        return begin_getSystemInformation(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getSystemInformation(java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSystemInformation_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSystemInformation_name, __cb);
        try
        {
            __result.prepare(__getSystemInformation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_getSystemInformation(ISystemInformationPrxHolder si, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSystemInformation_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            si.value = ISystemInformationPrxHelper.__read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSystemInformation_completed(YNRPC._Callback_IService_getSystemInformation __cb, Ice.AsyncResult __result)
    {
        IServicePrx __proxy = (IServicePrx)__result.getProxy();
        Result __ret = null;
        ISystemInformationPrxHolder si = new ISystemInformationPrxHolder();
        try
        {
            __ret = __proxy.end_getSystemInformation(si, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, si.value);
    }

    private static final String __init_name = "init";

    public Result init()
    {
        return init(null, false);
    }

    public Result init(java.util.Map<String, String> __ctx)
    {
        return init(__ctx, true);
    }

    private Result init(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__init_name);
        return end_init(begin_init(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_init()
    {
        return begin_init(null, false, false, null);
    }

    public Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx)
    {
        return begin_init(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_init(Ice.Callback __cb)
    {
        return begin_init(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_init(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_init(Callback_IService_init __cb)
    {
        return begin_init(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, Callback_IService_init __cb)
    {
        return begin_init(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_init(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_init(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_init(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_init(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_init(__ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      IServicePrxHelper.__init_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_init(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__init_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__init_name, __cb);
        try
        {
            __result.prepare(__init_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_init(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __init_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __init_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        IServicePrx __proxy = (IServicePrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_init(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __uninit_name = "uninit";

    public Result uninit()
    {
        return uninit(null, false);
    }

    public Result uninit(java.util.Map<String, String> __ctx)
    {
        return uninit(__ctx, true);
    }

    private Result uninit(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__uninit_name);
        return end_uninit(begin_uninit(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_uninit()
    {
        return begin_uninit(null, false, false, null);
    }

    public Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx)
    {
        return begin_uninit(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_uninit(Ice.Callback __cb)
    {
        return begin_uninit(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uninit(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uninit(Callback_IService_uninit __cb)
    {
        return begin_uninit(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, Callback_IService_uninit __cb)
    {
        return begin_uninit(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uninit(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uninit(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uninit(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uninit(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uninit(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uninit(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uninit(__ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        IServicePrxHelper.__uninit_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_uninit(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__uninit_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__uninit_name, __cb);
        try
        {
            __result.prepare(__uninit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_uninit(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __uninit_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __uninit_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        IServicePrx __proxy = (IServicePrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_uninit(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IServicePrx.class, IServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IServicePrx.class, IServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IServicePrx.class, IServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IServicePrx.class, IServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IServicePrx.class, IServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IServicePrx.class, IServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::IService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static IServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IServicePrxHelper result = new IServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
