// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

/**
 * Provides type-specific helper functions.
 **/
public final class IDataMonitorPrxHelper extends Ice.ObjectPrxHelperBase implements IDataMonitorPrx
{
    private static final String __getDevicesState_name = "getDevicesState";

    public Result getDevicesState(DeviceInfoListHolder states)
    {
        return getDevicesState(states, null, false);
    }

    public Result getDevicesState(DeviceInfoListHolder states, java.util.Map<String, String> __ctx)
    {
        return getDevicesState(states, __ctx, true);
    }

    private Result getDevicesState(DeviceInfoListHolder states, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDevicesState_name);
        return end_getDevicesState(states, begin_getDevicesState(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDevicesState()
    {
        return begin_getDevicesState(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx)
    {
        return begin_getDevicesState(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDevicesState(Ice.Callback __cb)
    {
        return begin_getDevicesState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDevicesState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesState(Callback_IDataMonitor_getDevicesState __cb)
    {
        return begin_getDevicesState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, Callback_IDataMonitor_getDevicesState __cb)
    {
        return begin_getDevicesState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesState(FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevicesState(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevicesState(FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevicesState(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevicesState(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevicesState(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IDataMonitor_getDevicesState
        {
            public CB(FunctionalCallback_IDataMonitor_getDevicesState_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, DeviceInfo[] states)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, states);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IDataMonitorPrxHelper.__getDevicesState_completed(this, __result);
            }

            private final FunctionalCallback_IDataMonitor_getDevicesState_Response __responseCb;
        }
        return begin_getDevicesState(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getDevicesState(java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDevicesState_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDevicesState_name, __cb);
        try
        {
            __result.prepare(__getDevicesState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_getDevicesState(DeviceInfoListHolder states, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDevicesState_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            states.value = DeviceInfoListHelper.read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDevicesState_completed(YNRPC._Callback_IDataMonitor_getDevicesState __cb, Ice.AsyncResult __result)
    {
        IDataMonitorPrx __proxy = (IDataMonitorPrx)__result.getProxy();
        Result __ret = null;
        DeviceInfoListHolder states = new DeviceInfoListHolder();
        try
        {
            __ret = __proxy.end_getDevicesState(states, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, states.value);
    }

    private static final String __queryDeviceDataFrames_name = "queryDeviceDataFrames";

    public Result queryDeviceDataFrames(String devName, int inId, int limit, StringListHolder msgs, Ice.IntHolder outId)
    {
        return queryDeviceDataFrames(devName, inId, limit, msgs, outId, null, false);
    }

    public Result queryDeviceDataFrames(String devName, int inId, int limit, StringListHolder msgs, Ice.IntHolder outId, java.util.Map<String, String> __ctx)
    {
        return queryDeviceDataFrames(devName, inId, limit, msgs, outId, __ctx, true);
    }

    private Result queryDeviceDataFrames(String devName, int inId, int limit, StringListHolder msgs, Ice.IntHolder outId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryDeviceDataFrames_name);
        return end_queryDeviceDataFrames(msgs, outId, begin_queryDeviceDataFrames(devName, inId, limit, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit, java.util.Map<String, String> __ctx)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit, Ice.Callback __cb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit, Callback_IDataMonitor_queryDeviceDataFrames __cb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, int inId, int limit, java.util.Map<String, String> __ctx, Callback_IDataMonitor_queryDeviceDataFrames __cb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                       int inId, 
                                                       int limit, 
                                                       FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                       int inId, 
                                                       int limit, 
                                                       FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                       int inId, 
                                                       int limit, 
                                                       java.util.Map<String, String> __ctx, 
                                                       FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                       int inId, 
                                                       int limit, 
                                                       java.util.Map<String, String> __ctx, 
                                                       FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                        int inId, 
                                                        int limit, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IDataMonitor_queryDeviceDataFrames
        {
            public CB(FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, String[] msgs, int outId)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, msgs, outId);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IDataMonitorPrxHelper.__queryDeviceDataFrames_completed(this, __result);
            }

            private final FunctionalCallback_IDataMonitor_queryDeviceDataFrames_Response __responseCb;
        }
        return begin_queryDeviceDataFrames(devName, inId, limit, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_queryDeviceDataFrames(String devName, 
                                                        int inId, 
                                                        int limit, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryDeviceDataFrames_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryDeviceDataFrames_name, __cb);
        try
        {
            __result.prepare(__queryDeviceDataFrames_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(devName);
            __os.writeInt(inId);
            __os.writeInt(limit);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_queryDeviceDataFrames(StringListHolder msgs, Ice.IntHolder outId, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryDeviceDataFrames_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            msgs.value = StringListHelper.read(__is);
            outId.value = __is.readInt();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryDeviceDataFrames_completed(YNRPC._Callback_IDataMonitor_queryDeviceDataFrames __cb, Ice.AsyncResult __result)
    {
        IDataMonitorPrx __proxy = (IDataMonitorPrx)__result.getProxy();
        Result __ret = null;
        StringListHolder msgs = new StringListHolder();
        Ice.IntHolder outId = new Ice.IntHolder();
        try
        {
            __ret = __proxy.end_queryDeviceDataFrames(msgs, outId, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, msgs.value, outId.value);
    }

    private static final String __queryPointIds_name = "queryPointIds";

    public Result queryPointIds(String[] ptNames, PointIdListHolder ptIds)
    {
        return queryPointIds(ptNames, ptIds, null, false);
    }

    public Result queryPointIds(String[] ptNames, PointIdListHolder ptIds, java.util.Map<String, String> __ctx)
    {
        return queryPointIds(ptNames, ptIds, __ctx, true);
    }

    private Result queryPointIds(String[] ptNames, PointIdListHolder ptIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryPointIds_name);
        return end_queryPointIds(ptIds, begin_queryPointIds(ptNames, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames)
    {
        return begin_queryPointIds(ptNames, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, java.util.Map<String, String> __ctx)
    {
        return begin_queryPointIds(ptNames, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, Ice.Callback __cb)
    {
        return begin_queryPointIds(ptNames, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryPointIds(ptNames, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, Callback_IDataMonitor_queryPointIds __cb)
    {
        return begin_queryPointIds(ptNames, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, java.util.Map<String, String> __ctx, Callback_IDataMonitor_queryPointIds __cb)
    {
        return begin_queryPointIds(ptNames, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                               FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryPointIds(ptNames, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                               FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryPointIds(ptNames, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryPointIds(ptNames, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryPointIds(ptNames, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IDataMonitor_queryPointIds
        {
            public CB(FunctionalCallback_IDataMonitor_queryPointIds_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, int[] ptIds)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, ptIds);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IDataMonitorPrxHelper.__queryPointIds_completed(this, __result);
            }

            private final FunctionalCallback_IDataMonitor_queryPointIds_Response __responseCb;
        }
        return begin_queryPointIds(ptNames, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_queryPointIds(String[] ptNames, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryPointIds_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryPointIds_name, __cb);
        try
        {
            __result.prepare(__queryPointIds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StringListHelper.write(__os, ptNames);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_queryPointIds(PointIdListHolder ptIds, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryPointIds_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ptIds.value = PointIdListHelper.read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryPointIds_completed(YNRPC._Callback_IDataMonitor_queryPointIds __cb, Ice.AsyncResult __result)
    {
        IDataMonitorPrx __proxy = (IDataMonitorPrx)__result.getProxy();
        Result __ret = null;
        PointIdListHolder ptIds = new PointIdListHolder();
        try
        {
            __ret = __proxy.end_queryPointIds(ptIds, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, ptIds.value);
    }

    private static final String __queryRealDatas_name = "queryRealDatas";

    public Result queryRealDatas(int[] ptIds, RvqtListHolder values)
    {
        return queryRealDatas(ptIds, values, null, false);
    }

    public Result queryRealDatas(int[] ptIds, RvqtListHolder values, java.util.Map<String, String> __ctx)
    {
        return queryRealDatas(ptIds, values, __ctx, true);
    }

    private Result queryRealDatas(int[] ptIds, RvqtListHolder values, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryRealDatas_name);
        return end_queryRealDatas(values, begin_queryRealDatas(ptIds, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds)
    {
        return begin_queryRealDatas(ptIds, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, java.util.Map<String, String> __ctx)
    {
        return begin_queryRealDatas(ptIds, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, Ice.Callback __cb)
    {
        return begin_queryRealDatas(ptIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryRealDatas(ptIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, Callback_IDataMonitor_queryRealDatas __cb)
    {
        return begin_queryRealDatas(ptIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, java.util.Map<String, String> __ctx, Callback_IDataMonitor_queryRealDatas __cb)
    {
        return begin_queryRealDatas(ptIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryRealDatas(ptIds, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryRealDatas(ptIds, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryRealDatas(ptIds, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryRealDatas(ptIds, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IDataMonitor_queryRealDatas
        {
            public CB(FunctionalCallback_IDataMonitor_queryRealDatas_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, Rvqt[] values)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, values);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IDataMonitorPrxHelper.__queryRealDatas_completed(this, __result);
            }

            private final FunctionalCallback_IDataMonitor_queryRealDatas_Response __responseCb;
        }
        return begin_queryRealDatas(ptIds, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_queryRealDatas(int[] ptIds, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryRealDatas_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryRealDatas_name, __cb);
        try
        {
            __result.prepare(__queryRealDatas_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            PointIdListHelper.write(__os, ptIds);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_queryRealDatas(RvqtListHolder values, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryRealDatas_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            values.value = RvqtListHelper.read(__is);
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryRealDatas_completed(YNRPC._Callback_IDataMonitor_queryRealDatas __cb, Ice.AsyncResult __result)
    {
        IDataMonitorPrx __proxy = (IDataMonitorPrx)__result.getProxy();
        Result __ret = null;
        RvqtListHolder values = new RvqtListHolder();
        try
        {
            __ret = __proxy.end_queryRealDatas(values, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, values.value);
    }

    private static final String __querySystemLog_name = "querySystemLog";

    public Result querySystemLog(int inId, int limit, StringListHolder msgs, Ice.IntHolder outId)
    {
        return querySystemLog(inId, limit, msgs, outId, null, false);
    }

    public Result querySystemLog(int inId, int limit, StringListHolder msgs, Ice.IntHolder outId, java.util.Map<String, String> __ctx)
    {
        return querySystemLog(inId, limit, msgs, outId, __ctx, true);
    }

    private Result querySystemLog(int inId, int limit, StringListHolder msgs, Ice.IntHolder outId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__querySystemLog_name);
        return end_querySystemLog(msgs, outId, begin_querySystemLog(inId, limit, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit)
    {
        return begin_querySystemLog(inId, limit, null, false, false, null);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit, java.util.Map<String, String> __ctx)
    {
        return begin_querySystemLog(inId, limit, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit, Ice.Callback __cb)
    {
        return begin_querySystemLog(inId, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_querySystemLog(inId, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit, Callback_IDataMonitor_querySystemLog __cb)
    {
        return begin_querySystemLog(inId, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, int limit, java.util.Map<String, String> __ctx, Callback_IDataMonitor_querySystemLog __cb)
    {
        return begin_querySystemLog(inId, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, 
                                                int limit, 
                                                FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_querySystemLog(inId, limit, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, 
                                                int limit, 
                                                FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_querySystemLog(inId, limit, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, 
                                                int limit, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_querySystemLog(inId, limit, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_querySystemLog(int inId, 
                                                int limit, 
                                                java.util.Map<String, String> __ctx, 
                                                FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_querySystemLog(inId, limit, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_querySystemLog(int inId, 
                                                 int limit, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_IDataMonitor_querySystemLog
        {
            public CB(FunctionalCallback_IDataMonitor_querySystemLog_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, String[] msgs, int outId)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, msgs, outId);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IDataMonitorPrxHelper.__querySystemLog_completed(this, __result);
            }

            private final FunctionalCallback_IDataMonitor_querySystemLog_Response __responseCb;
        }
        return begin_querySystemLog(inId, limit, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_querySystemLog(int inId, 
                                                 int limit, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__querySystemLog_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__querySystemLog_name, __cb);
        try
        {
            __result.prepare(__querySystemLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(inId);
            __os.writeInt(limit);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_querySystemLog(StringListHolder msgs, Ice.IntHolder outId, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __querySystemLog_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            msgs.value = StringListHelper.read(__is);
            outId.value = __is.readInt();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __querySystemLog_completed(YNRPC._Callback_IDataMonitor_querySystemLog __cb, Ice.AsyncResult __result)
    {
        IDataMonitorPrx __proxy = (IDataMonitorPrx)__result.getProxy();
        Result __ret = null;
        StringListHolder msgs = new StringListHolder();
        Ice.IntHolder outId = new Ice.IntHolder();
        try
        {
            __ret = __proxy.end_querySystemLog(msgs, outId, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, msgs.value, outId.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataMonitorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataMonitorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataMonitorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataMonitorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IDataMonitorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IDataMonitorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IDataMonitorPrx.class, IDataMonitorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::IDataMonitor"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IDataMonitorPrx v)
    {
        __os.writeProxy(v);
    }

    public static IDataMonitorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IDataMonitorPrxHelper result = new IDataMonitorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
