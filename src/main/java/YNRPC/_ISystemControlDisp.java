// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

public abstract class _ISystemControlDisp extends Ice.ObjectImpl implements ISystemControl
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::ISystemControl"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * Description: 校验工程有效性
     * Input: 
     * Output: 
     * Return:
     * Others: 
     **/
    public final Result checkProject()
    {
        return checkProject(null);
    }

    /**
     * Description: 导出工程到文件
     * Input:
     * Output: fileName 导出后工程文件名，全路径
     * Return:
     * Others: 
     **/
    public final Result exportProject(Ice.StringHolder fileName)
    {
        return exportProject(fileName, null);
    }

    /**
     * Description: 从文件导入工程
     * Input: fileName 导入工程的文件名，全路径
     * Output: 
     * Return:
     * Others: 当前工程将被覆盖
     **/
    public final Result importProject(String fileName)
    {
        return importProject(fileName, null);
    }

    /**
     * Description: 创建新工程
     * Input:
     * Output: 
     * Return:
     * Others:
     **/
    public final Result newProject()
    {
        return newProject(null);
    }

    /**
     * Description: 重启盒子系统
     * Input: 
     * Output: 
     * Return:
     * Others: 
     **/
    public final Result rebootBox()
    {
        return rebootBox(null);
    }

    /**
     * Description: 保存新工程
     * Input:
     * Output: 
     * Return:
     * Others:
     **/
    public final Result saveProject()
    {
        return saveProject(null);
    }

    /**
     * Description: 启动单个设备
     * Input: deviceName设备名称
     * Output: 
     * Return:
     * Others: 如工程配置此设备为非激状态，启动将失败。
     **/
    public final Result startDevice(String deviceName)
    {
        return startDevice(deviceName, null);
    }

    /**
     * Description: 启动工程
     * Input: 
     * Output: 
     * Return:
     * Others: 如有工程在运行将返回错误
     **/
    public final Result startProject()
    {
        return startProject(null);
    }

    /**
     * Description: 停止单个设备
     * Input: deviceName设备名称
     * Output: 
     * Return:
     * Others: 
     **/
    public final Result stopDevice(String deviceName)
    {
        return stopDevice(deviceName, null);
    }

    /**
     * Description: 停止当前运行工程
     * Input: 
     * Output: 
     * Return:
     * Others: 停止当前运行工程
     **/
    public final Result stopProject()
    {
        return stopProject(null);
    }

    public static Ice.DispatchStatus ___newProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.newProject(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___saveProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.saveProject(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___exportProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Ice.StringHolder fileName = new Ice.StringHolder();
        Result __ret = __obj.exportProject(fileName, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(fileName.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___importProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String fileName;
        fileName = __is.readString();
        __inS.endReadParams();
        Result __ret = __obj.importProject(fileName, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___checkProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.checkProject(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.startProject(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stopProject(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.stopProject(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___rebootBox(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        Result __ret = __obj.rebootBox(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startDevice(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String deviceName;
        deviceName = __is.readString();
        __inS.endReadParams();
        Result __ret = __obj.startDevice(deviceName, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stopDevice(ISystemControl __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String deviceName;
        deviceName = __is.readString();
        __inS.endReadParams();
        Result __ret = __obj.stopDevice(deviceName, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "checkProject",
        "exportProject",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "importProject",
        "newProject",
        "rebootBox",
        "saveProject",
        "startDevice",
        "startProject",
        "stopDevice",
        "stopProject"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___checkProject(this, in, __current);
            }
            case 1:
            {
                return ___exportProject(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___importProject(this, in, __current);
            }
            case 7:
            {
                return ___newProject(this, in, __current);
            }
            case 8:
            {
                return ___rebootBox(this, in, __current);
            }
            case 9:
            {
                return ___saveProject(this, in, __current);
            }
            case 10:
            {
                return ___startDevice(this, in, __current);
            }
            case 11:
            {
                return ___startProject(this, in, __current);
            }
            case 12:
            {
                return ___stopDevice(this, in, __current);
            }
            case 13:
            {
                return ___stopProject(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
