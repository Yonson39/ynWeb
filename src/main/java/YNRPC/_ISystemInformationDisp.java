// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

public abstract class _ISystemInformationDisp extends Ice.ObjectImpl implements ISystemInformation
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::ISystemInformation"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * Description: 获得嵌入式应用使用情况
     * Input: 
     * Output: values 返回状态列表
     * 为键值对数组，键为资源名称、值为资源使用值
     * Return:
     * Others: 
     **/
    public final Result getAppRunState(KeyValueListHolder values)
    {
        return getAppRunState(values, null);
    }

    /**
     * Description: 获得系统串口使用情况
     * Input: 
     * Output: values 返回状态列表
     * 为键值对数组，键为资源名称、值为资源使用值
     * Return:
     * Others: 
     **/
    public final Result getComportsState(DeviceInfoListHolder states)
    {
        return getComportsState(states, null);
    }

    /**
     * Description: 获得系统网口使用情况
     * Input: 
     * Output: values 返回状态列表
     * 为键值对数组，键为资源名称、值为资源使用值
     * Return:
     * Others: 
     **/
    public final Result getNetportsState(DeviceInfoListHolder states)
    {
        return getNetportsState(states, null);
    }

    /**
     * Description: 获得系统资源使用情况
     * Input: 
     * Output: values 返回资源使用情况列表
     * 为键值对数组，键为资源名称、值为资源使用值
     * Return:
     * Others: 
     **/
    public final Result getSystemResourcesState(KeyValueListHolder values)
    {
        return getSystemResourcesState(values, null);
    }

    public static Ice.DispatchStatus ___getSystemResourcesState(ISystemInformation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        KeyValueListHolder values = new KeyValueListHolder();
        Result __ret = __obj.getSystemResourcesState(values, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        KeyValueListHelper.write(__os, values.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getAppRunState(ISystemInformation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        KeyValueListHolder values = new KeyValueListHolder();
        Result __ret = __obj.getAppRunState(values, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        KeyValueListHelper.write(__os, values.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getNetportsState(ISystemInformation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        DeviceInfoListHolder states = new DeviceInfoListHolder();
        Result __ret = __obj.getNetportsState(states, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        DeviceInfoListHelper.write(__os, states.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getComportsState(ISystemInformation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        DeviceInfoListHolder states = new DeviceInfoListHolder();
        Result __ret = __obj.getComportsState(states, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        DeviceInfoListHelper.write(__os, states.value);
        Result.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getAppRunState",
        "getComportsState",
        "getNetportsState",
        "getSystemResourcesState",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getAppRunState(this, in, __current);
            }
            case 1:
            {
                return ___getComportsState(this, in, __current);
            }
            case 2:
            {
                return ___getNetportsState(this, in, __current);
            }
            case 3:
            {
                return ___getSystemResourcesState(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
