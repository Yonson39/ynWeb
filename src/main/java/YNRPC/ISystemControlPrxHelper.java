// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

/**
 * Provides type-specific helper functions.
 **/
public final class ISystemControlPrxHelper extends Ice.ObjectPrxHelperBase implements ISystemControlPrx
{
    private static final String __checkProject_name = "checkProject";

    public Result checkProject()
    {
        return checkProject(null, false);
    }

    public Result checkProject(java.util.Map<String, String> __ctx)
    {
        return checkProject(__ctx, true);
    }

    private Result checkProject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__checkProject_name);
        return end_checkProject(begin_checkProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_checkProject()
    {
        return begin_checkProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx)
    {
        return begin_checkProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_checkProject(Ice.Callback __cb)
    {
        return begin_checkProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_checkProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_checkProject(Callback_ISystemControl_checkProject __cb)
    {
        return begin_checkProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_checkProject __cb)
    {
        return begin_checkProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_checkProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_checkProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_checkProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_checkProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkProject(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              ISystemControlPrxHelper.__checkProject_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_checkProject(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__checkProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__checkProject_name, __cb);
        try
        {
            __result.prepare(__checkProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_checkProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __checkProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __checkProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_checkProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __exportProject_name = "exportProject";

    public Result exportProject(Ice.StringHolder fileName)
    {
        return exportProject(fileName, null, false);
    }

    public Result exportProject(Ice.StringHolder fileName, java.util.Map<String, String> __ctx)
    {
        return exportProject(fileName, __ctx, true);
    }

    private Result exportProject(Ice.StringHolder fileName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__exportProject_name);
        return end_exportProject(fileName, begin_exportProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_exportProject()
    {
        return begin_exportProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx)
    {
        return begin_exportProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_exportProject(Ice.Callback __cb)
    {
        return begin_exportProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exportProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_exportProject(Callback_ISystemControl_exportProject __cb)
    {
        return begin_exportProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_exportProject __cb)
    {
        return begin_exportProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_exportProject(FunctionalCallback_ISystemControl_exportProject_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_exportProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_exportProject(FunctionalCallback_ISystemControl_exportProject_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_exportProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_ISystemControl_exportProject_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_exportProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_ISystemControl_exportProject_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_exportProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                FunctionalCallback_ISystemControl_exportProject_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements YNRPC._Callback_ISystemControl_exportProject
        {
            public CB(FunctionalCallback_ISystemControl_exportProject_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(Result __ret, String fileName)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, fileName);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                ISystemControlPrxHelper.__exportProject_completed(this, __result);
            }

            private final FunctionalCallback_ISystemControl_exportProject_Response __responseCb;
        }
        return begin_exportProject(__ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_exportProject(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exportProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__exportProject_name, __cb);
        try
        {
            __result.prepare(__exportProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_exportProject(Ice.StringHolder fileName, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __exportProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            fileName.value = __is.readString();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __exportProject_completed(YNRPC._Callback_ISystemControl_exportProject __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        Ice.StringHolder fileName = new Ice.StringHolder();
        try
        {
            __ret = __proxy.end_exportProject(fileName, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, fileName.value);
    }

    private static final String __importProject_name = "importProject";

    public Result importProject(String fileName)
    {
        return importProject(fileName, null, false);
    }

    public Result importProject(String fileName, java.util.Map<String, String> __ctx)
    {
        return importProject(fileName, __ctx, true);
    }

    private Result importProject(String fileName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__importProject_name);
        return end_importProject(begin_importProject(fileName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_importProject(String fileName)
    {
        return begin_importProject(fileName, null, false, false, null);
    }

    public Ice.AsyncResult begin_importProject(String fileName, java.util.Map<String, String> __ctx)
    {
        return begin_importProject(fileName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_importProject(String fileName, Ice.Callback __cb)
    {
        return begin_importProject(fileName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_importProject(String fileName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_importProject(fileName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_importProject(String fileName, Callback_ISystemControl_importProject __cb)
    {
        return begin_importProject(fileName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_importProject(String fileName, java.util.Map<String, String> __ctx, Callback_ISystemControl_importProject __cb)
    {
        return begin_importProject(fileName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_importProject(String fileName, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_importProject(fileName, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_importProject(String fileName, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_importProject(fileName, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_importProject(String fileName, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_importProject(fileName, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_importProject(String fileName, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_importProject(fileName, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_importProject(String fileName, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_importProject(fileName, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               ISystemControlPrxHelper.__importProject_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_importProject(String fileName, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__importProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__importProject_name, __cb);
        try
        {
            __result.prepare(__importProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(fileName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_importProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __importProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __importProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_importProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __newProject_name = "newProject";

    public Result newProject()
    {
        return newProject(null, false);
    }

    public Result newProject(java.util.Map<String, String> __ctx)
    {
        return newProject(__ctx, true);
    }

    private Result newProject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__newProject_name);
        return end_newProject(begin_newProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_newProject()
    {
        return begin_newProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx)
    {
        return begin_newProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_newProject(Ice.Callback __cb)
    {
        return begin_newProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_newProject(Callback_ISystemControl_newProject __cb)
    {
        return begin_newProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_newProject __cb)
    {
        return begin_newProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_newProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_newProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_newProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_newProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_newProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_newProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_newProject(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            ISystemControlPrxHelper.__newProject_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_newProject(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__newProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__newProject_name, __cb);
        try
        {
            __result.prepare(__newProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_newProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __newProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __newProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_newProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __rebootBox_name = "rebootBox";

    public Result rebootBox()
    {
        return rebootBox(null, false);
    }

    public Result rebootBox(java.util.Map<String, String> __ctx)
    {
        return rebootBox(__ctx, true);
    }

    private Result rebootBox(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__rebootBox_name);
        return end_rebootBox(begin_rebootBox(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rebootBox()
    {
        return begin_rebootBox(null, false, false, null);
    }

    public Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx)
    {
        return begin_rebootBox(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rebootBox(Ice.Callback __cb)
    {
        return begin_rebootBox(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rebootBox(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rebootBox(Callback_ISystemControl_rebootBox __cb)
    {
        return begin_rebootBox(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, Callback_ISystemControl_rebootBox __cb)
    {
        return begin_rebootBox(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rebootBox(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rebootBox(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rebootBox(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rebootBox(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rebootBox(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rebootBox(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rebootBox(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           ISystemControlPrxHelper.__rebootBox_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_rebootBox(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rebootBox_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rebootBox_name, __cb);
        try
        {
            __result.prepare(__rebootBox_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_rebootBox(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __rebootBox_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __rebootBox_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_rebootBox(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveProject_name = "saveProject";

    public Result saveProject()
    {
        return saveProject(null, false);
    }

    public Result saveProject(java.util.Map<String, String> __ctx)
    {
        return saveProject(__ctx, true);
    }

    private Result saveProject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveProject_name);
        return end_saveProject(begin_saveProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveProject()
    {
        return begin_saveProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx)
    {
        return begin_saveProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveProject(Ice.Callback __cb)
    {
        return begin_saveProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveProject(Callback_ISystemControl_saveProject __cb)
    {
        return begin_saveProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_saveProject __cb)
    {
        return begin_saveProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveProject(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             ISystemControlPrxHelper.__saveProject_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_saveProject(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveProject_name, __cb);
        try
        {
            __result.prepare(__saveProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_saveProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_saveProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startDevice_name = "startDevice";

    public Result startDevice(String deviceName)
    {
        return startDevice(deviceName, null, false);
    }

    public Result startDevice(String deviceName, java.util.Map<String, String> __ctx)
    {
        return startDevice(deviceName, __ctx, true);
    }

    private Result startDevice(String deviceName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startDevice_name);
        return end_startDevice(begin_startDevice(deviceName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startDevice(String deviceName)
    {
        return begin_startDevice(deviceName, null, false, false, null);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, java.util.Map<String, String> __ctx)
    {
        return begin_startDevice(deviceName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, Ice.Callback __cb)
    {
        return begin_startDevice(deviceName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startDevice(deviceName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, Callback_ISystemControl_startDevice __cb)
    {
        return begin_startDevice(deviceName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, java.util.Map<String, String> __ctx, Callback_ISystemControl_startDevice __cb)
    {
        return begin_startDevice(deviceName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startDevice(deviceName, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startDevice(deviceName, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startDevice(deviceName, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startDevice(String deviceName, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startDevice(deviceName, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startDevice(String deviceName, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startDevice(deviceName, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             ISystemControlPrxHelper.__startDevice_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_startDevice(String deviceName, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startDevice_name, __cb);
        try
        {
            __result.prepare(__startDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_startDevice(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startDevice_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_startDevice(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startProject_name = "startProject";

    public Result startProject()
    {
        return startProject(null, false);
    }

    public Result startProject(java.util.Map<String, String> __ctx)
    {
        return startProject(__ctx, true);
    }

    private Result startProject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startProject_name);
        return end_startProject(begin_startProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startProject()
    {
        return begin_startProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx)
    {
        return begin_startProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startProject(Ice.Callback __cb)
    {
        return begin_startProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startProject(Callback_ISystemControl_startProject __cb)
    {
        return begin_startProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_startProject __cb)
    {
        return begin_startProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startProject(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              ISystemControlPrxHelper.__startProject_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_startProject(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startProject_name, __cb);
        try
        {
            __result.prepare(__startProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_startProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_startProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __stopDevice_name = "stopDevice";

    public Result stopDevice(String deviceName)
    {
        return stopDevice(deviceName, null, false);
    }

    public Result stopDevice(String deviceName, java.util.Map<String, String> __ctx)
    {
        return stopDevice(deviceName, __ctx, true);
    }

    private Result stopDevice(String deviceName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__stopDevice_name);
        return end_stopDevice(begin_stopDevice(deviceName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName)
    {
        return begin_stopDevice(deviceName, null, false, false, null);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, java.util.Map<String, String> __ctx)
    {
        return begin_stopDevice(deviceName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, Ice.Callback __cb)
    {
        return begin_stopDevice(deviceName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopDevice(deviceName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, Callback_ISystemControl_stopDevice __cb)
    {
        return begin_stopDevice(deviceName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, java.util.Map<String, String> __ctx, Callback_ISystemControl_stopDevice __cb)
    {
        return begin_stopDevice(deviceName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopDevice(deviceName, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopDevice(deviceName, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopDevice(deviceName, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopDevice(String deviceName, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopDevice(deviceName, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopDevice(String deviceName, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopDevice(deviceName, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            ISystemControlPrxHelper.__stopDevice_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_stopDevice(String deviceName, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopDevice_name, __cb);
        try
        {
            __result.prepare(__stopDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_stopDevice(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __stopDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __stopDevice_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_stopDevice(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __stopProject_name = "stopProject";

    public Result stopProject()
    {
        return stopProject(null, false);
    }

    public Result stopProject(java.util.Map<String, String> __ctx)
    {
        return stopProject(__ctx, true);
    }

    private Result stopProject(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__stopProject_name);
        return end_stopProject(begin_stopProject(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopProject()
    {
        return begin_stopProject(null, false, false, null);
    }

    public Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx)
    {
        return begin_stopProject(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopProject(Ice.Callback __cb)
    {
        return begin_stopProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopProject(Callback_ISystemControl_stopProject __cb)
    {
        return begin_stopProject(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, Callback_ISystemControl_stopProject __cb)
    {
        return begin_stopProject(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopProject(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopProject(IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopProject(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopProject(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopProject(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<Result> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopProject(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<Result>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             ISystemControlPrxHelper.__stopProject_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_stopProject(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopProject_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopProject_name, __cb);
        try
        {
            __result.prepare(__stopProject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Result end_stopProject(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __stopProject_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Result __ret;
            __ret = Result.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __stopProject_completed(Ice.TwowayCallbackArg1<Result> __cb, Ice.AsyncResult __result)
    {
        ISystemControlPrx __proxy = (ISystemControlPrx)__result.getProxy();
        Result __ret = null;
        try
        {
            __ret = __proxy.end_stopProject(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ISystemControlPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ISystemControlPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ISystemControlPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ISystemControlPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ISystemControlPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ISystemControlPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ISystemControlPrx.class, ISystemControlPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::YNRPC::ISystemControl"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, ISystemControlPrx v)
    {
        __os.writeProxy(v);
    }

    public static ISystemControlPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ISystemControlPrxHelper result = new ISystemControlPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
