// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RpcCommon.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package YNRPC;

public class Rvqt implements Cloneable, java.io.Serializable
{
    public Result r;

    public String v;

    public String q;

    public String t;

    public Rvqt()
    {
        r = Result.RTOK;
        v = "";
        q = "";
        t = "";
    }

    public Rvqt(Result r, String v, String q, String t)
    {
        this.r = r;
        this.v = v;
        this.q = q;
        this.t = t;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Rvqt _r = null;
        if(rhs instanceof Rvqt)
        {
            _r = (Rvqt)rhs;
        }

        if(_r != null)
        {
            if(r != _r.r)
            {
                if(r == null || _r.r == null || !r.equals(_r.r))
                {
                    return false;
                }
            }
            if(v != _r.v)
            {
                if(v == null || _r.v == null || !v.equals(_r.v))
                {
                    return false;
                }
            }
            if(q != _r.q)
            {
                if(q == null || _r.q == null || !q.equals(_r.q))
                {
                    return false;
                }
            }
            if(t != _r.t)
            {
                if(t == null || _r.t == null || !t.equals(_r.t))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::YNRPC::Rvqt");
        __h = IceInternal.HashUtil.hashAdd(__h, r);
        __h = IceInternal.HashUtil.hashAdd(__h, v);
        __h = IceInternal.HashUtil.hashAdd(__h, q);
        __h = IceInternal.HashUtil.hashAdd(__h, t);
        return __h;
    }

    public Rvqt
    clone()
    {
        Rvqt c = null;
        try
        {
            c = (Rvqt)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        Result.__write(__os, r);
        __os.writeString(v);
        __os.writeString(q);
        __os.writeString(t);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        r = Result.__read(__is);
        v = __is.readString();
        q = __is.readString();
        t = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, Rvqt __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Rvqt
    __read(IceInternal.BasicStream __is, Rvqt __v)
    {
        if(__v == null)
        {
             __v = new Rvqt();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Rvqt __nullMarshalValue = new Rvqt();

    public static final long serialVersionUID = 219577789L;
}
